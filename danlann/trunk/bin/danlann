#!/usr/bin/python
#
# Danlann - Memory Jail - an easy to use photo gallery generator.
#
# Copyright (C) 2006-2008 by Artur Wroblewski <wrobell@pld-linux.org>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#!/usr/bin/python

import sys
import optparse
import logging

opt_parser = optparse.OptionParser('%prog [options] gallery.ini')

opt_parser.add_option('-v', dest = 'verbose', action = 'store_true',
    help = 'explain what is being done')

opt_parser.add_option('--nc', dest = 'copy',
    action = 'store_false',
    default = True,
    help = 'do not copy additional gallery files')

opt_parser.add_option('--ng', dest = 'generate',
    action = 'store_false',
    default = True,
    help = 'do not generate gallery files')

opt_parser.add_option('--validate', dest = 'validate',
    action = 'store_true',
    help = 'validate generated XHTML files (overrides configuration')

opt_parser.add_option('--no-validate', dest = 'validate',
    action = 'store_false',
    help = 'do not validate generated XHTML files (overrides configuration')

#opt_parser.add_option('--cleanup', dest = 'cleanup',
#    action = 'store_true',
#    default = False,
#    help = 'delete unused files from gallery directory')

opt_parser.add_option('--debug', dest = 'debug', action = 'store_true',
    help = 'turn on debug messages')

(options, args) = opt_parser.parse_args()

if len(args) != 1:
    opt_parser.error("incorrect number of arguments")

level = logging.ERROR
if options.debug:
    level = logging.DEBUG
elif options.verbose:
    level = logging.INFO

logging.basicConfig(level = level)
log = logging.getLogger('danlann')

from danlann import Danlann, ConfigurationError
from danlann.parser import ParseError

fn = args[0] # get gallery configuration file

try:
    processor = Danlann()
    conf = processor.readConf(fn)
    processor.initialize(conf, options.validate)
    processor.parse()

    if options.copy:
        log.info('copying additional files')
        processor.copy()

    if options.generate:
        log.info('generating gallery files')
        processor.generateGallery()

    if options.validate:
        log.info('validating XHTML files')
    processor.postprocess()

except ParseError, ex:
    print 'danlann: parser error: %s' % ex
    sys.exit(1)

except ConfigurationError, ex:
    print 'danlann: configuration error: %s' % ex
    sys.exit(1)
